package {{.ModuleName}}

import (
    "github.com/gin-gonic/gin"
    "github.com/gin-gonic/gin/binding"

    "go-admin/models"
    "go-admin/tools"
    "go-admin/tools/app"
    "go-admin/tools/app/msg"
)

func Get{{.ClassName}}List(c *gin.Context) {
    var data models.{{.ClassName}}
    var err error
    var pageSize = 10
    var pageIndex = 1

    if size := c.Request.FormValue("pageSize"); size != "" {
        pageSize, err = tools.StringToInt(size)
    }
    if index := c.Request.FormValue("pageIndex"); index != "" {
        pageIndex, err = tools.StringToInt(index)
    }

    var v dto.{{.ClassName}}Search
    err = c.Bind(&v)
    tools.HasError(err, "数据解析失败", 422)

    data.DataScope = tools.GetUserIdStr(c)
    result, count, err := data.GetPage(pageSize, pageIndex, v)
    tools.HasError(err, "", -1)

    app.PageOK(c, result, count, pageIndex, pageSize, "")
}

func Get{{.ClassName}}(c *gin.Context) {
    var data models.{{.ClassName}}
    data.{{.PkGoField}}, _ = tools.StringToInt(c.Param("{{.PkJsonField}}"))
    result, err := data.Get()
    tools.HasError(err, "抱歉未找到相关信息", -1)

    app.OK(c, result, "")
}

// @Summary 添加{{.TableComment}}
// @Description 获取JSON
// @Tags {{.TableComment}}
// @Accept  application/json
// @Product application/json
// @Param data body models.{{.ClassName}} true "data"
// @Success 200 {string} string	"{"code": 200, "message": "添加成功"}"
// @Success 200 {string} string	"{"code": -1, "message": "添加失败"}"
// @Router /api/v1/{{.ModuleName}} [post]
func Insert{{.ClassName}}(c *gin.Context) {
    var data models.{{.ClassName}}
    err := c.ShouldBindJSON(&data)
    data.CreateBy = tools.GetUserIdStr(c)
    tools.HasError(err, "", 500)
    result, err := data.Create()
    tools.HasError(err, "", -1)
    app.OK(c, result, "")
}

func Update{{.ClassName}}(c *gin.Context) {
    var data models.{{.ClassName}}
    err := c.BindWith(&data, binding.JSON)
    tools.HasError(err, "数据解析失败", -1)
    data.UpdateBy = tools.GetUserIdStr(c)
    result, err := data.Update(data.{{.PkGoField}})
    tools.HasError(err, "", -1)

    app.OK(c, result, "")
}

func Delete{{.ClassName}}(c *gin.Context) {
    var data models.{{.ClassName}}
    data.UpdateBy = tools.GetUserIdStr(c)

    IDS := tools.IdsStrToIdsIntGroup("{{.PkJsonField}}", c)
    _, err := data.BatchDelete(IDS)
    tools.HasError(err, msg.DeletedFail, 500)
    app.OK(c, nil, msg.DeletedSuccess)
}